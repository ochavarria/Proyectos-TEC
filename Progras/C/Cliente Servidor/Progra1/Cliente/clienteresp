#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <sys/types.h>
#include <sys/socket.h>


#include <netinet/in.h>
#include <arpa/inet.h>
#include <assert.h>

void gotoxy(int x,int y)
 {
 printf("%c[%d;%df",0x1B,y,x);
 }

int main(int argc ,char *arvg[]) 
{
	char *address;

	char* word;
	int bytesReceived = 0;
    char recvBuff[1024];
    memset(recvBuff, '0', sizeof(recvBuff));


	address = arvg[1];
	printf("La direccion es : %s\n", address);
	

	word = strtok(address, "/");
	word = strtok(NULL, "/");
	printf("Archivo: %s\n", word);


	
	//Crear el Hilo 
	int client_socket; 
    /* Create a socket first */
    if((client_socket = socket(AF_INET, SOCK_STREAM, 0))< 0)
    {
        printf("\n Error : Could not create socket \n");
        return 1;
    }

    printf("Se creo el socket\n");
    
	//Specificar la direccion 
	struct sockaddr_in remote_address;
	remote_address.sin_family= AF_INET;
	remote_address.sin_port = htons(9002); // se pasa el puerto para convertir el dato al formato correcto 
	inet_aton(address, &remote_address.sin_addr.s_addr); // da el formato de la direccion


	//server_address.sin_addr.s_addr = INADDR_ANY; (la direccion del local host)
	
	connect(client_socket, (struct sockaddr *) &remote_address, sizeof(remote_address));
	
	char request[4096] = "GET / HTTP/1.1/";
	strcat(request,word);
	send(client_socket,request,sizeof(request),0);
	
	printf("Se pide al server %s\n", request);



	FILE *fp;
	char fname[100];

	printf("File Name: %s\n",word);
	printf("Receiving file...");
   	fp = fopen(word, "ab"); 
    	if(NULL == fp)
    	{
       	 printf("Error opening file");
         return 1;
    	}

    long double sz=1;
    /* Receive data in chunks of 256 bytes */
    while((bytesReceived = read(client_socket, recvBuff, 1024)) > 0)
    { 
        sz++;
        gotoxy(0,4);
        printf("Received: %llf Mb",(sz/1024));
	   fflush(stdout);
        // recvBuff[n] = 0;
        fwrite(recvBuff, 1,bytesReceived,fp);
        // printf("%s \n", recvBuff);
    }

    if(bytesReceived < 0)
    {
        printf("\n Read Error \n");
    }
    printf("\nFile OK....Completed\n");





	close(client_socket);


	
	// // Verificar conexion 
	// if(connect_stat== -1 )
	// {
	// 	printf("Error haciendo la conexion con el socket \n");

	// }
	// char server_response[255];
	// recv(network_socket, &server_response, sizeof(server_response), 0);

	// // Imprimir la respuesta
	// printf("Los datos son: %s\n", server_response );
	// close(network_socket);


	return 0 ;
}